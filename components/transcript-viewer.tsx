"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogTitle,
  DialogHeader,
  DialogTrigger,
  DialogContent,
  DialogDescription,
} from "@/components/ui/dialog";
import {
  Eye,
  Copy,
  User,
  Clock,
  FileText,
  Download,
  Calendar,
  Sparkles,
  FileDown,
  CheckCircle2,
  ClipboardCopy,
} from "lucide-react";

interface TranscriptViewerProps {
  title: string;
  transcript: string;
  summary: string;
  metadata?: {
    channel?: string;
    duration_string?: string;
    release_date?: string;
  };
}

export function TranscriptViewer({
  title,
  transcript,
  summary,
  metadata,
}: TranscriptViewerProps) {
  const [copySuccess, setCopySuccess] = useState<
    "transcript" | "summary" | "complete" | null
  >(null);
  const [isOpen, setIsOpen] = useState(false);

  const handleCopy = async (
    content: string,
    type: "transcript" | "summary" | "complete"
  ) => {
    try {
      await navigator.clipboard.writeText(content);
      setCopySuccess(type);
      setTimeout(() => setCopySuccess(null), 2000);
    } catch (error) {
      console.error("Failed to copy:", error);
    }
  };

  const handleDownload = (content: string, filename: string) => {
    const blob = new Blob([content], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDownloadComplete = () => {
    const combinedContent = `# ${title}

## 📊 Metadata
${metadata?.channel ? `**Channel:** ${metadata.channel}\n` : ""}${
      metadata?.duration_string
        ? `**Duration:** ${metadata.duration_string}\n`
        : ""
    }${
      metadata?.release_date
        ? `**Release Date:** ${metadata.release_date}\n`
        : ""
    }

## 🎯 AI-Generated Summary
${summary}

## 📝 Full Transcript
${transcript}

---
*Generated by Podcast Summarizer - Powered by very early*
*Generated on: ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}*
`;

    const sanitizedTitle = title.replace(/[^a-z0-9]/gi, "_").toLowerCase();
    handleDownload(combinedContent, `${sanitizedTitle}_complete.md`);
  };

  const getCompleteContent = () => {
    return `${title}\n\n${summary}\n\n${transcript}`;
  };

  return (
    <div className="flex flex-wrap gap-3">
      {/* Preview Dialog */}
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
          <motion.div
            whileHover={{ scale: 1.02, y: -1 }}
            whileTap={{ scale: 0.98 }}
            className="shadow-sm hover:shadow-lg transition-all duration-300"
          >
            <Button
              variant="outline"
              size="sm"
              className="flex items-center gap-2 bg-white dark:bg-slate-900 border-2 border-slate-200 dark:border-slate-700 hover:border-corporate-300 dark:hover:border-corporate-600 hover:bg-slate-50 dark:hover:bg-slate-800 text-slate-700 dark:text-slate-300 font-medium transition-all duration-300 rounded-xl px-4 py-2.5"
            >
              <Eye className="w-4 h-4" />
              Preview Transcript
            </Button>
          </motion.div>
        </DialogTrigger>

        <DialogContent className="max-w-6xl h-[90vh] bg-white dark:bg-slate-900 border-2 border-slate-200 dark:border-slate-700 shadow-2xl rounded-2xl overflow-hidden flex flex-col">
          {/* Header */}
          <DialogHeader className="pb-6 border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-50 to-white dark:from-slate-800 dark:to-slate-900 px-8 pt-8 flex-shrink-0">
            <div className="flex items-start justify-between">
              <div className="flex-1 pr-4">
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="inline-flex items-center px-3 py-1 mb-4 text-xs font-semibold rounded-full bg-gradient-to-r from-corporate-600 to-corporate-700 text-white shadow-lg"
                >
                  <Sparkles className="w-3 h-3 mr-2" />
                  AI-Generated Content
                </motion.div>

                <DialogTitle className="text-2xl font-bold text-slate-900 dark:text-white font-heading leading-tight mb-3">
                  {title}
                </DialogTitle>

                <DialogDescription className="text-slate-600 dark:text-slate-400 text-base font-medium">
                  Complete transcript and AI summary with downloadable formats
                </DialogDescription>

                {/* Enhanced Metadata */}
                {metadata && (
                  <div className="flex flex-wrap gap-3 mt-4">
                    {metadata.channel && (
                      <Badge
                        variant="outline"
                        className="flex items-center gap-2 px-3 py-1.5 bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-medium"
                      >
                        <User className="w-3.5 h-3.5" />
                        {metadata.channel}
                      </Badge>
                    )}
                    {metadata.duration_string && (
                      <Badge
                        variant="outline"
                        className="flex items-center gap-2 px-3 py-1.5 bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-medium"
                      >
                        <Clock className="w-3.5 h-3.5" />
                        {metadata.duration_string}
                      </Badge>
                    )}
                    {metadata.release_date && (
                      <Badge
                        variant="outline"
                        className="flex items-center gap-2 px-3 py-1.5 bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-medium"
                      >
                        <Calendar className="w-3.5 h-3.5" />
                        {metadata.release_date}
                      </Badge>
                    )}
                  </div>
                )}
              </div>
            </div>
          </DialogHeader>

          {/* Action Bar */}
          <div className="px-8 py-4 bg-slate-50 dark:bg-slate-800/50 border-b border-slate-200 dark:border-slate-700 flex-shrink-0">
            <div className="flex flex-wrap gap-3">
              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <Button
                  onClick={handleDownloadComplete}
                  size="sm"
                  className="bg-gradient-to-r from-corporate-600 to-corporate-700 hover:from-corporate-700 hover:to-corporate-800 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl px-4 py-2.5"
                >
                  <FileDown className="w-4 h-4 mr-2" />
                  Download Complete (.md)
                </Button>
              </motion.div>

              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <Button
                  onClick={() => handleCopy(getCompleteContent(), "complete")}
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-2 bg-white dark:bg-slate-800 border-2 border-slate-200 dark:border-slate-600 hover:border-corporate-300 dark:hover:border-corporate-500 text-slate-700 dark:text-slate-300 font-medium transition-all duration-300 rounded-xl px-4 py-2.5"
                >
                  {copySuccess === "complete" ? (
                    <CheckCircle2 className="w-4 h-4 text-green-600" />
                  ) : (
                    <ClipboardCopy className="w-4 h-4" />
                  )}
                  {copySuccess === "complete" ? "Copied!" : "Copy All"}
                </Button>
              </motion.div>

              <div className="flex-1" />

              <div className="text-xs text-slate-500 dark:text-slate-400 flex items-center gap-2 px-3 py-2 bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
                <FileText className="w-3 h-3" />
                {transcript.split(" ").length.toLocaleString()} words •{" "}
                {Math.ceil(transcript.split(" ").length / 200)} min read
              </div>
            </div>
          </div>

          {/* Content Tabs - This is the main scrollable area */}
          <div className="px-8 py-6 flex-1 min-h-0 overflow-hidden">
            <Tabs defaultValue="summary" className="h-full flex flex-col">
              <TabsList className="grid w-full grid-cols-2 mb-6 p-1 bg-slate-100 dark:bg-slate-800 rounded-xl h-12 flex-shrink-0">
                <TabsTrigger
                  value="summary"
                  className="flex items-center gap-2 rounded-lg py-2.5 px-4 font-semibold data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-md data-[state=active]:text-corporate-700 dark:data-[state=active]:text-corporate-300 transition-all duration-200"
                >
                  <Sparkles className="w-4 h-4" />
                  AI Summary
                </TabsTrigger>
                <TabsTrigger
                  value="transcript"
                  className="flex items-center gap-2 rounded-lg py-2.5 px-4 font-semibold data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-md data-[state=active]:text-corporate-700 dark:data-[state=active]:text-corporate-300 transition-all duration-200"
                >
                  <FileText className="w-4 h-4" />
                  Full Transcript
                </TabsTrigger>
              </TabsList>

              {/* Tab Content - Fixed height with proper scrolling */}
              <div className="flex-1 min-h-0 overflow-hidden">
                <TabsContent
                  value="summary"
                  className="h-full mt-0 data-[state=inactive]:hidden"
                >
                  <div className="h-full flex flex-col">
                    <div className="flex items-center justify-between mb-4 flex-shrink-0">
                      <h3 className="text-lg font-bold text-slate-900 dark:text-white flex items-center gap-2">
                        <Sparkles className="w-5 h-5 text-corporate-600 dark:text-corporate-400" />
                        Executive Summary
                      </h3>
                      <Button
                        onClick={() => handleCopy(summary, "summary")}
                        variant="ghost"
                        size="sm"
                        className="text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-white hover:bg-slate-100 dark:hover:bg-slate-800 rounded-lg px-3 py-2"
                      >
                        {copySuccess === "summary" ? (
                          <CheckCircle2 className="w-4 h-4 mr-2 text-green-600" />
                        ) : (
                          <Copy className="w-4 h-4 mr-2" />
                        )}
                        {copySuccess === "summary" ? "Copied!" : "Copy"}
                      </Button>
                    </div>

                    {/* Fixed height scrollable area */}
                    <div className="flex-1 min-h-0 rounded-xl border-2 border-slate-200 dark:border-slate-700 bg-gradient-to-br from-white to-slate-50 dark:from-slate-900 dark:to-slate-800 overflow-hidden">
                      <ScrollArea className="h-full w-full">
                        <div className="p-6 h-full">
                          <div className="text-slate-800 dark:text-slate-200 leading-relaxed text-base whitespace-pre-wrap font-sans">
                            {summary}
                          </div>
                        </div>
                      </ScrollArea>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent
                  value="transcript"
                  className="h-full mt-0 data-[state=inactive]:hidden"
                >
                  <div className="h-full flex flex-col">
                    <div className="flex items-center justify-between mb-4 flex-shrink-0">
                      <h3 className="text-lg font-bold text-slate-900 dark:text-white flex items-center gap-2">
                        <FileText className="w-5 h-5 text-corporate-600 dark:text-corporate-400" />
                        Complete Transcript
                      </h3>
                      <Button
                        onClick={() => handleCopy(transcript, "transcript")}
                        variant="ghost"
                        size="sm"
                        className="text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-white hover:bg-slate-100 dark:hover:bg-slate-800 rounded-lg px-3 py-2"
                      >
                        {copySuccess === "transcript" ? (
                          <CheckCircle2 className="w-4 h-4 mr-2 text-green-600" />
                        ) : (
                          <Copy className="w-4 h-4 mr-2" />
                        )}
                        {copySuccess === "transcript" ? "Copied!" : "Copy"}
                      </Button>
                    </div>

                    {/* Fixed height scrollable area */}
                    <div className="flex-1 min-h-0 rounded-xl border-2 border-slate-200 dark:border-slate-700 bg-gradient-to-br from-white to-slate-50 dark:from-slate-900 dark:to-slate-800 overflow-hidden">
                      <ScrollArea className="h-full w-full">
                        <div className="p-6 h-full">
                          <div className="text-slate-800 dark:text-slate-200 leading-relaxed text-base whitespace-pre-wrap font-sans">
                            {transcript}
                          </div>
                        </div>
                      </ScrollArea>
                    </div>
                  </div>
                </TabsContent>
              </div>
            </Tabs>
          </div>

          {/* Footer */}
          <div className="px-8 py-4 bg-slate-50 dark:bg-slate-800/50 border-t border-slate-200 dark:border-slate-700 flex-shrink-0">
            <div className="flex items-center justify-between text-sm">
              <div className="flex items-center gap-2 text-slate-600 dark:text-slate-400">
                <Sparkles className="w-4 h-4" />
                <span className="font-medium">
                  Generated by AI Podcast Summarizer
                </span>
              </div>
              <div className="text-slate-500 dark:text-slate-400">
                Powered by{" "}
                <span className="font-semibold text-corporate-600 dark:text-corporate-400">
                  very early
                </span>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Quick Download Button */}
      <motion.div
        whileHover={{ scale: 1.02, y: -1 }}
        whileTap={{ scale: 0.98 }}
        className="shadow-sm hover:shadow-lg transition-all duration-300"
      >
        <Button
          onClick={handleDownloadComplete}
          variant="outline"
          size="sm"
          className="flex items-center gap-2 bg-gradient-to-r from-corporate-50 to-corporate-100 dark:from-corporate-900/20 dark:to-corporate-800/20 border-2 border-corporate-200 dark:border-corporate-700 text-corporate-700 dark:text-corporate-300 hover:from-corporate-100 hover:to-corporate-200 dark:hover:from-corporate-800/30 dark:hover:to-corporate-700/30 hover:border-corporate-300 dark:hover:border-corporate-600 font-medium transition-all duration-300 rounded-xl px-4 py-2.5"
        >
          <Download className="w-4 h-4" />
          Download Complete
        </Button>
      </motion.div>
    </div>
  );
}
